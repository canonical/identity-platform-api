// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

syntax = "proto3";

package identity.platform.api.roles;
option go_package = "github.com/canonical/identity-platform-api/roles";

import "roles/model.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service RolesService {
  rpc ListRoles(google.protobuf.Empty) returns (ListRolesResp) {
    option (google.api.http) = {
      get: "/api/v0/roles"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200",
        value: {
          description: "Created";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetRole(GetRoleReq) returns (ListRolesResp) {
    option (google.api.http) = {
      get: "/api/v0/roles/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc CreateRole(CreateRoleReq) returns (ListRolesResp) {
    option (google.api.http) = {
      post: "/api/v0/roles"
      body: "role"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateRole(UpdateRoleReq) returns (UpdateRoleResp) {
    option (google.api.http) = {
      patch: "/api/v0/roles/{id}"
      body: "role"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "501",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Not implemented";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveRole(RemoveRoleReq) returns (RemoveRoleResp) {
    option (google.api.http) = {
      delete: "/api/v0/roles/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc ListRoleEntitlements(ListRoleEntitlementsReq) returns (ListRoleEntitlementsResp) {
    option (google.api.http) = {
      get: "/api/v0/roles/{id}/entitlements"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "X-Token-Pagination";
          description: "Base64 encoded pagination info";
          type: STRING,
        };
      };

      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateRoleEntitlements (UpdateRoleEntitlementsReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/api/v0/roles/{id}/entitlements"
      body: "entitlementsPatchReq"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveRoleEntitlement (RemoveRoleEntitlementReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v0/roles/{id}/entitlements/{entitlementId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetRoleGroups (GetRoleGroupsReq) returns (GetRoleGroupsResp) {
    option (google.api.http) = {
      get: "/api/v0/roles/{id}/groups"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }
}

