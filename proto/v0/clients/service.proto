// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

syntax = "proto3";

package identity.platform.api.clients;
option go_package = "github.com/canonical/identity-platform-api/clients";

import "v0/clients/model.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service ClientsService {
  rpc ListClients (ListClientsReq) returns (ListClientsResp) {
    option (google.api.http) = {
      get: "/api/v0/clients"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetClient (GetClientReq) returns (GetClientResp) {
    option (google.api.http) = {
      get: "/api/v0/clients/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc CreateClient (CreateClientReq) returns (CreateClientResp) {
    option (google.api.http) = {
      post: "/api/v0/clients"
      body: "client"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateClient (UpdateClientReq) returns (UpdateClientResp) {
    option (google.api.http) = {
      put: "/api/v0/clients/{id}"
      body: "client"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "404",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Not found";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveClient (RemoveClientReq) returns (RemoveClientResp) {
    option (google.api.http) = {
      delete: "/api/v0/clients/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }
}
