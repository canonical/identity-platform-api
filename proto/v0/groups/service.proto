// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

syntax = "proto3";

package identity.platform.api.groups;
option go_package = "github.com/canonical/identity-platform-api/groups";

import "v0/groups/model.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


service GroupsService {
  rpc ListGroups (google.protobuf.Empty) returns (ListGroupsResp) {
    option (google.api.http) = {
      get: "/api/v0/groups"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetGroup(GetGroupReq) returns (GetGroupResp) {
    option (google.api.http) = {
      get: "/api/v0/groups/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp) {
    option (google.api.http) = {
      post: "/api/v0/groups"
      body: "group"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateGroup(UpdateGroupReq) returns (UpdateGroupResp) {
    option (google.api.http) = {
      patch: "/api/v0/groups/{id}"
      body: "group"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "501",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Not implemented";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveGroup(RemoveGroupReq) returns (RemoveGroupResp) {
    option (google.api.http) = {
      delete: "/api/v0/groups/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc ListGroupEntitlements(ListGroupEntitlementsReq) returns (ListGroupEntitlementsResp) {
    option (google.api.http) = {
      get: "/api/v0/groups/{id}/entitlements"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "X-Token-Pagination";
          description: "Base64 encoded pagination info";
          type: STRING,
        };
      };

      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateGroupEntitlements (UpdateGroupEntitlementsReq) returns (UpdateGroupEntitlementsResp) {
    option (google.api.http) = {
      patch: "/api/v0/groups/{id}/entitlements"
      body: "entitlementsPatchReq"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveGroupEntitlement (RemoveGroupEntitlementReq) returns (RemoveGroupEntitlementResp) {
    option (google.api.http) = {
      delete: "/api/v0/groups/{id}/entitlements/{entitlementId}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetGroupRoles (GetGroupRolesReq) returns (GetGroupRolesResp) {
    option (google.api.http) = {
      get: "/api/v0/groups/{id}/roles"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateGroupRoles (UpdateGroupRolesReq) returns (UpdateGroupRolesResp) {
    option (google.api.http) = {
      post: "/api/v0/groups/{id}/roles"
      body: "roles"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveGroupRole (RemoveGroupRoleReq) returns (RemoveGroupRoleResp) {
    option (google.api.http) = {
      delete: "/api/v0/groups/{id}/roles/{roleId}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc GetGroupIdentities (GetGroupIdentitiesReq) returns (GetGroupIdentitiesResp) {
    option (google.api.http) = {
      get: "/api/v0/groups/{id}/identities"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc UpdateGroupIdentities (UpdateGroupIdentitiesReq) returns (UpdateGroupIdentitiesResp) {
    option (google.api.http) = {
      patch: "/api/v0/groups/{id}/identities"
      body: "identities"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
      };
      responses: {
        key: "400",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Bad request";
        }
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }

  rpc RemoveGroupIdentity (RemoveGroupIdentityReq) returns (RemoveGroupIdentityResp) {
    option (google.api.http) = {
      delete: "/api/v0/groups/{id}/identities/{identityId}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
      };
      responses: {
        key: "401",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Unauthorized";
        }
      };
      responses: {
        key: "403",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Forbidden";
        }
      };
      responses: {
        key: "default",
        value: {
          schema: {
            json_schema: {
              ref: ".identity.platform.api.types.ErrorResponse"
            }
          }
          description: "Internal server error";
        }
      };
    };
  }
}

