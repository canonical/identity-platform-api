{
  "swagger": "2.0",
  "info": {
    "title": "Identity Platform API",
    "description": "REST API for the Admin UI service",
    "version": "0.1",
    "contact": {
      "name": "Identity Platform API",
      "url": "https://github.com/canonical/identity-platform-api"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://github.com/canonical/identity-platform-api/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "AuthenticationService"
    },
    {
      "name": "AppAuthorizationService"
    },
    {
      "name": "AuthzGroupsService"
    },
    {
      "name": "ClientsService"
    },
    {
      "name": "GroupsService"
    },
    {
      "name": "IdentitiesService"
    },
    {
      "name": "IdpsService"
    },
    {
      "name": "MetricsService"
    },
    {
      "name": "RolesService"
    },
    {
      "name": "SchemasService"
    },
    {
      "name": "StatusService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v0/auth": {
      "get": {
        "operationId": "AuthenticationService_Login",
        "responses": {
          "302": {
            "description": "Redirects the client to the identity provider's authorization endpoint.\n\nThe response is a 302 Redirect with a Location header.",
            "schema": {}
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/api/v0/auth/callback": {
      "get": {
        "operationId": "AuthenticationService_Callback",
        "responses": {
          "302": {
            "description": "This endpoint redirects the client to the original location after authentication.\n\nThe response is a 302 Redirect with a Location header.",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/api/v0/auth/me": {
      "get": {
        "operationId": "AuthenticationService_Me",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authenticationMeResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/api/v0/auth/logout": {
      "get": {
        "operationId": "AuthenticationService_Logout",
        "responses": {
          "302": {
            "description": "This endpoint logs out the client and redirects to the requested location.\n\nThe response is a 302 Redirect with a Location header.",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/api/v0/groups/{groupId}/apps": {
      "get": {
        "summary": "GetAllowedAppsInGroup retrieves the list of apps allowed in a specific group.",
        "operationId": "AppAuthorizationService_GetAllowedAppsInGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationGetAllowedAppsInGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      },
      "delete": {
        "summary": "RemoveAllowedAppsFromGroup removes all apps from the allowed list of a group.",
        "operationId": "AppAuthorizationService_RemoveAllowedAppsFromGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationRemoveAllowedAppsFromGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      },
      "post": {
        "summary": "AddAllowedAppToGroup adds an app to the allowed list of a group.",
        "operationId": "AppAuthorizationService_AddAllowedAppToGroup",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationAddAllowedAppToGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "app",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorizationApp"
            }
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      }
    },
    "/api/v0/groups/{groupId}/apps/{appId}": {
      "delete": {
        "summary": "RemoveAllowedAppFromGroup removes a specific app from the allowed list of a group.",
        "operationId": "AppAuthorizationService_RemoveAllowedAppFromGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationRemoveAllowedAppFromGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      }
    },
    "/api/v0/apps/{appId}/groups": {
      "get": {
        "summary": "GetAllowedGroupsForApp retrieves the list of groups an app is allowed in.",
        "operationId": "AppAuthorizationService_GetAllowedGroupsForApp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationGetAllowedGroupsForAppResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      },
      "delete": {
        "summary": "RemoveAllowedGroupsForApp removes an app from all groups it is allowed in.",
        "operationId": "AppAuthorizationService_RemoveAllowedGroupsForApp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authorizationRemoveAllowedGroupsForAppResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AppAuthorizationService"
        ]
      }
    },
    "/api/v0/authz/groups": {
      "get": {
        "operationId": "AuthzGroupsService_ListGroups",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiauthz_groupsListGroupsResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      },
      "post": {
        "operationId": "AuthzGroupsService_CreateGroup",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiauthz_groupsCreateGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authz_groupsGroupInput"
            }
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      }
    },
    "/api/v0/authz/groups/{id}": {
      "get": {
        "operationId": "AuthzGroupsService_GetGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiauthz_groupsGetGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      },
      "delete": {
        "operationId": "AuthzGroupsService_RemoveGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiauthz_groupsRemoveGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      },
      "put": {
        "operationId": "AuthzGroupsService_UpdateGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiauthz_groupsUpdateGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authz_groupsGroupInput"
            }
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      }
    },
    "/api/v0/authz/groups/{id}/users": {
      "get": {
        "operationId": "AuthzGroupsService_ListUsersInGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authz_groupsListUsersInGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      },
      "post": {
        "operationId": "AuthzGroupsService_AddUsersToGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authz_groupsAddUsersToGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      }
    },
    "/api/v0/authz/groups/{id}/users/{userId}": {
      "delete": {
        "operationId": "AuthzGroupsService_RemoveUserFromGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authz_groupsRemoveUserFromGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      }
    },
    "/api/v0/authz/users/{id}/groups": {
      "get": {
        "operationId": "AuthzGroupsService_ListUserGroups",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authz_groupsListUserGroupsResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      },
      "put": {
        "operationId": "AuthzGroupsService_AddUserToGroups",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authz_groupsAddUserToGroupsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "AuthzGroupsService"
        ]
      }
    },
    "/api/v0/clients": {
      "get": {
        "operationId": "ClientsService_ListClients",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/clientsListClientsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "clientName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClientsService"
        ]
      },
      "post": {
        "operationId": "ClientsService_CreateClient",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/clientsCreateClientResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientsClient"
            }
          }
        ],
        "tags": [
          "ClientsService"
        ]
      }
    },
    "/api/v0/clients/{id}": {
      "get": {
        "operationId": "ClientsService_GetClient",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/clientsGetClientResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientsService"
        ]
      },
      "delete": {
        "operationId": "ClientsService_RemoveClient",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/clientsRemoveClientResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClientsService"
        ]
      },
      "put": {
        "operationId": "ClientsService_UpdateClient",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/clientsUpdateClientResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clientsClient"
            }
          }
        ],
        "tags": [
          "ClientsService"
        ]
      }
    },
    "/api/v0/groups": {
      "get": {
        "operationId": "GroupsService_ListGroups",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apigroupsListGroupsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "GroupsService"
        ]
      },
      "post": {
        "operationId": "GroupsService_CreateGroup",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apigroupsCreateGroupResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigroupsGroup"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}": {
      "get": {
        "operationId": "GroupsService_GetGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apigroupsGetGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "delete": {
        "operationId": "GroupsService_RemoveGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apigroupsRemoveGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroup",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "501": {
            "description": "Not implemented",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apigroupsGroup"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/entitlements": {
      "get": {
        "operationId": "GroupsService_ListGroupEntitlements",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsListGroupEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Token-Pagination",
            "description": "Base64 encoded pagination info",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroupEntitlements",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupEntitlementsResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementsPatchReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesPermissions"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/entitlements/{entitlementId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupEntitlement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupEntitlementResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/roles": {
      "get": {
        "operationId": "GroupsService_GetGroupRoles",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsGetGroupRolesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "post": {
        "operationId": "GroupsService_UpdateGroupRoles",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupRolesResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsRoles"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/roles/{roleId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/identities": {
      "get": {
        "operationId": "GroupsService_GetGroupIdentities",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsGetGroupIdentitiesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroupIdentities",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupIdentitiesResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identities",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsIdentities"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/identities/{identityId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupIdentity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identityId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/identities": {
      "get": {
        "operationId": "IdentitiesService_ListIdentities",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/identitiesListIdentitiesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "post": {
        "operationId": "IdentitiesService_CreateIdentity",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/identitiesCreateIdentityResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "identity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identitiesCreateIdentityBody"
            }
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      }
    },
    "/api/v0/identities/{id}": {
      "get": {
        "operationId": "IdentitiesService_GetIdentity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/identitiesGetIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "delete": {
        "operationId": "IdentitiesService_RemoveIdentity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/identitiesRemoveIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "put": {
        "operationId": "IdentitiesService_UpdateIdentity",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/identitiesUpdateIdentityResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identitiesUpdateIdentityBody"
            }
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      }
    },
    "/api/v0/idps": {
      "get": {
        "operationId": "IdpsService_ListIdps",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/idpsListIdpsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "IdpsService"
        ]
      },
      "post": {
        "operationId": "IdpsService_CreateIdp",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/idpsCreateIdpResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "idp",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idpsCreateIdpBody"
            }
          }
        ],
        "tags": [
          "IdpsService"
        ]
      }
    },
    "/api/v0/idps/{id}": {
      "get": {
        "operationId": "IdpsService_GetIdp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/idpsGetIdpResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdpsService"
        ]
      },
      "delete": {
        "operationId": "IdpsService_RemoveIdp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/idpsRemoveIdpResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdpsService"
        ]
      },
      "patch": {
        "operationId": "IdpsService_UpdateIdp",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/idpsUpdateIdpResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idp",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idpsUpdateIdpBody"
            }
          }
        ],
        "tags": [
          "IdpsService"
        ]
      }
    },
    "/api/v0/metrics": {
      "get": {
        "operationId": "MetricsService_ListMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {}
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v0/roles": {
      "get": {
        "operationId": "RolesService_ListRoles",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesListRolesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "RolesService"
        ]
      },
      "post": {
        "operationId": "RolesService_CreateRole",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesCreateRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rolesRole"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}": {
      "get": {
        "operationId": "RolesService_GetRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesGetRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "delete": {
        "operationId": "RolesService_RemoveRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesRemoveRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "patch": {
        "operationId": "RolesService_UpdateRole",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "501": {
            "description": "Not implemented",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rolesRole"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/entitlements": {
      "get": {
        "operationId": "RolesService_ListRoleEntitlements",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesListRoleEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Token-Pagination",
            "description": "Base64 encoded pagination info",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "patch": {
        "operationId": "RolesService_UpdateRoleEntitlements",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesUpdateRoleEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementsPatchReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesPermissions"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/entitlements/{entitlementId}": {
      "delete": {
        "operationId": "RolesService_RemoveRoleEntitlement",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesRemoveRoleEntitlementResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/groups": {
      "get": {
        "operationId": "RolesService_GetRoleGroups",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/rolesGetRoleGroupsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/schemas": {
      "get": {
        "operationId": "SchemasService_ListSchemas",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasListSchemasResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SchemasService"
        ]
      },
      "post": {
        "operationId": "SchemasService_CreateSchema",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasCreateSchemaResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apischemasSchema"
            }
          }
        ],
        "tags": [
          "SchemasService"
        ]
      }
    },
    "/api/v0/schemas/{id}": {
      "get": {
        "operationId": "SchemasService_GetSchema",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasGetSchemaResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SchemasService"
        ]
      },
      "delete": {
        "operationId": "SchemasService_RemoveSchema",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasRemoveSchemaResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SchemasService"
        ]
      },
      "patch": {
        "operationId": "SchemasService_UpdateSchema",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasUpdateSchemaResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apischemasSchema"
            }
          }
        ],
        "tags": [
          "SchemasService"
        ]
      }
    },
    "/api/v0/schemas/default": {
      "get": {
        "operationId": "SchemasService_GetDefaultSchema",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasGetDefaultSchemaResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "SchemasService"
        ]
      },
      "put": {
        "operationId": "SchemasService_UpdateDefaultSchema",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/schemasUpdateDefaultSchemaResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schemasDefaultSchema"
            }
          }
        ],
        "tags": [
          "SchemasService"
        ]
      }
    },
    "/api/v0/status": {
      "get": {
        "operationId": "StatusService_GetStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apistatusStatus"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    },
    "/api/v0/version": {
      "get": {
        "operationId": "StatusService_GetVersion",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/statusBuildInfo"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    }
  },
  "definitions": {
    "apiauthorizationGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        }
      }
    },
    "apiauthz_groupsCreateGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthz_groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "apiauthz_groupsGetGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthz_groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "apiauthz_groupsGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiauthz_groupsListGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthz_groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "apiauthz_groupsRemoveGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "apiauthz_groupsUpdateGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthz_groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "apigroupsCreateGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apigroupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "apigroupsGetGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apigroupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "apigroupsGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "apigroupsListGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "apigroupsRemoveGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "apigroupsUpdateGroupResp": {
      "type": "object"
    },
    "apischemasSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "schema": {
          "type": "object"
        },
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "apistatusStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "buildInfo": {
          "$ref": "#/definitions/statusBuildInfo"
        }
      }
    },
    "authenticationMeResp": {
      "type": "object",
      "properties": {
        "sub": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "sid": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        }
      }
    },
    "authorizationAddAllowedAppToGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authorizationApp": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        }
      }
    },
    "authorizationGetAllowedAppsInGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authorizationApp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authorizationGetAllowedGroupsForAppResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthorizationGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authorizationRemoveAllowedAppFromGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authorizationRemoveAllowedAppsFromGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authorizationRemoveAllowedGroupsForAppResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authz_groupsAddUserToGroupsResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authz_groupsAddUsersToGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authz_groupsGroupInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "authz_groupsListUserGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiauthz_groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "authz_groupsListUsersInGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authz_groupsUser"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "authz_groupsRemoveUserFromGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authz_groupsUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "clientsClient": {
      "type": "object",
      "properties": {
        "accessTokenStrategy": {
          "type": "string"
        },
        "allowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audience": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorizationCodeGrantAccessTokenLifespan": {
          "type": "string"
        },
        "authorizationCodeGrantIdTokenLifespan": {
          "type": "string"
        },
        "authorizationCodeGrantRefreshTokenLifespan": {
          "type": "string"
        },
        "backchannelLogoutSessionRequired": {
          "type": "boolean"
        },
        "backchannelLogoutUri": {
          "type": "string"
        },
        "clientCredentialsGrantAccessTokenLifespan": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientName": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "clientSecretExpiresAt": {
          "type": "string",
          "format": "int64"
        },
        "clientUri": {
          "type": "string"
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "frontchannelLogoutSessionRequired": {
          "type": "boolean"
        },
        "frontchannelLogoutUri": {
          "type": "string"
        },
        "grantTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "implicitGrantAccessTokenLifespan": {
          "type": "string"
        },
        "implicitGrantIdTokenLifespan": {
          "type": "string"
        },
        "jwks": {
          "type": "object"
        },
        "jwksUri": {
          "type": "string"
        },
        "jwtBearerGrantAccessTokenLifespan": {
          "type": "string"
        },
        "logoUri": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "owner": {
          "type": "string"
        },
        "policyUri": {
          "type": "string"
        },
        "postLogoutRedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "refreshTokenGrantAccessTokenLifespan": {
          "type": "string"
        },
        "refreshTokenGrantIdTokenLifespan": {
          "type": "string"
        },
        "refreshTokenGrantRefreshTokenLifespan": {
          "type": "string"
        },
        "registrationAccessToken": {
          "type": "string"
        },
        "registrationClientUri": {
          "type": "string"
        },
        "requestObjectSigningAlg": {
          "type": "string"
        },
        "requestUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "sectorIdentifierUri": {
          "type": "string"
        },
        "skipConsent": {
          "type": "boolean"
        },
        "subjectType": {
          "type": "string"
        },
        "tokenEndpointAuthMethod": {
          "type": "string"
        },
        "tokenEndpointAuthSigningAlg": {
          "type": "string"
        },
        "tosUri": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "userinfoSignedResponseAlg": {
          "type": "string"
        }
      }
    },
    "clientsCreateClientResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/clientsClient"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "clientsGetClientResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/clientsClient"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "clientsListClientsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/clientsClient"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "clientsRemoveClientResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "clientsUpdateClientResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/clientsClient"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "groupsGetGroupIdentitiesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsGetGroupRolesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsIdentities": {
      "type": "object",
      "properties": {
        "identities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "groupsListGroupEntitlementsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupEntitlementResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupIdentityResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupRoleResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRoles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "groupsUpdateGroupEntitlementsResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsUpdateGroupIdentitiesResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsUpdateGroupRolesResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "identitiesCreateIdentityBody": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "object"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "recoveryAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesRecoveryIdentityAddress"
          }
        },
        "schemaId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "traits": {
          "type": "object"
        },
        "verifiableAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesVerifiableIdentityAddress"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "identitiesCreateIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesGetIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesIdentity": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/identitiesIdentityCredentials"
          }
        },
        "id": {
          "type": "string"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "organizationId": {
          "$ref": "#/definitions/identitiesNullableString"
        },
        "recoveryAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesRecoveryIdentityAddress"
          }
        },
        "schemaId": {
          "type": "string"
        },
        "schemaUrl": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateChangedAt": {
          "type": "string",
          "format": "date-time"
        },
        "traits": {
          "type": "object"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "verifiableAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesVerifiableIdentityAddress"
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesIdentityCredentials": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {}
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "int64"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesListIdentitiesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesNullableString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "isSet": {
          "type": "boolean"
        }
      }
    },
    "identitiesRecoveryIdentityAddress": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "via": {
          "type": "string"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesRemoveIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "identitiesUpdateIdentityBody": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "object"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "schemaId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "traits": {
          "type": "object"
        },
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "identitiesUpdateIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesVerifiableIdentityAddress": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "via": {
          "type": "string"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "idpsCreateIdpBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "string"
        }
      }
    },
    "idpsCreateIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsGetIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsIdp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "string"
        }
      }
    },
    "idpsListIdpsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsRemoveIdpResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsUpdateIdpBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "string"
        }
      }
    },
    "idpsUpdateIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rolesCreateRoleResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rolesRole"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesGetRoleGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesGetRoleResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rolesRole"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesListRoleEntitlementsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesListRolesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesRemoveRoleEntitlementResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesRemoveRoleResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "rolesUpdateRoleEntitlementsResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesUpdateRoleResp": {
      "type": "object"
    },
    "schemasCreateSchemaResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apischemasSchema"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemasDefaultSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "schemasGetDefaultSchemaResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/schemasDefaultSchema"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemasGetSchemaResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apischemasSchema"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemasListSchemasResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apischemasSchema"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "schemasRemoveSchemaResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemasUpdateDefaultSchemaResp": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/schemasDefaultSchema"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "schemasUpdateSchemaResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apischemasSchema"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "statusBuildInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commitHash": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "typesErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "typesPagination": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        }
      }
    },
    "typesPaginationInput": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "typesPermission": {
      "type": "object",
      "properties": {
        "relation": {
          "type": "string"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "typesPermissions": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPermission"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "email": "",
        "openid": "",
        "profile": ""
      }
    }
  },
  "externalDocs": {
    "description": "REST API for the Admin UI service",
    "url": "https://github.com/canonical/identity-platform-admin-ui/blob/main/API.md"
  }
}
