{
  "swagger": "2.0",
  "info": {
    "title": "Identity Platform API",
    "description": "REST API for the Admin UI service",
    "version": "0.1",
    "contact": {
      "name": "Identity Platform API",
      "url": "https://github.com/canonical/identity-platform-api"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://github.com/canonical/identity-platform-api/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "GroupsService"
    },
    {
      "name": "IdentitiesService"
    },
    {
      "name": "IdpsService"
    },
    {
      "name": "MetricsService"
    },
    {
      "name": "RolesService"
    },
    {
      "name": "StatusService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v0/groups": {
      "get": {
        "operationId": "GroupsService_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsListGroupsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "GroupsService"
        ]
      },
      "post": {
        "operationId": "GroupsService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsCreateGroupResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsGroup"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}": {
      "get": {
        "operationId": "GroupsService_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsGetGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "delete": {
        "operationId": "GroupsService_RemoveGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "501": {
            "description": "Not implemented",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsGroup"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/entitlements": {
      "get": {
        "operationId": "GroupsService_ListGroupEntitlements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsListGroupEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Token-Pagination",
            "description": "Base64 encoded pagination info",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroupEntitlements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupEntitlementsResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementsPatchReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesPermissions"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/entitlements/{entitlementId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupEntitlement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupEntitlementResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/identities": {
      "get": {
        "operationId": "GroupsService_GetGroupIdentities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsGetGroupIdentitiesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "patch": {
        "operationId": "GroupsService_UpdateGroupIdentities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupIdentitiesResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identities",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsIdentities"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/identities/{identityId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identityId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/roles": {
      "get": {
        "operationId": "GroupsService_GetGroupRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsGetGroupRolesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      },
      "post": {
        "operationId": "GroupsService_UpdateGroupRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsUpdateGroupRolesResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupsRoles"
            }
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/groups/{id}/roles/{roleId}": {
      "delete": {
        "operationId": "GroupsService_RemoveGroupRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupsRemoveGroupRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupsService"
        ]
      }
    },
    "/api/v0/identities": {
      "get": {
        "operationId": "IdentitiesService_ListIdentities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identitiesListIdentitiesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "post": {
        "operationId": "IdentitiesService_CreateIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identitiesCreateIdentityResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "identity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identitiesCreateIdentityBody"
            }
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      }
    },
    "/api/v0/identities/{id}": {
      "get": {
        "operationId": "IdentitiesService_GetIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identitiesGetIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "delete": {
        "operationId": "IdentitiesService_RemoveIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identitiesRemoveIdentityResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      },
      "put": {
        "operationId": "IdentitiesService_UpdateIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identitiesUpdateIdentityResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "identity",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identitiesUpdateIdentityBody"
            }
          }
        ],
        "tags": [
          "IdentitiesService"
        ]
      }
    },
    "/api/v0/idps": {
      "get": {
        "operationId": "IdpsService_ListIdps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idpsListIdpsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "IdpsService"
        ]
      },
      "post": {
        "operationId": "IdpsService_CreateIdp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idpsCreateIdpResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idpsCreateIdpBody"
            }
          }
        ],
        "tags": [
          "IdpsService"
        ]
      }
    },
    "/api/v0/idps/{id}": {
      "get": {
        "operationId": "IdpsService_GetIdp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idpsGetIdpResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdpsService"
        ]
      },
      "delete": {
        "operationId": "IdpsService_RemoveIdp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idpsRemoveIdpResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdpsService"
        ]
      },
      "patch": {
        "operationId": "IdpsService_UpdateIdp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idpsUpdateIdpResp"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idpsUpdateIdpBody"
            }
          }
        ],
        "tags": [
          "IdpsService"
        ]
      }
    },
    "/api/v0/metrics": {
      "get": {
        "operationId": "MetricsService_ListMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "MetricsService"
        ]
      }
    },
    "/api/v0/roles": {
      "get": {
        "operationId": "RolesService_ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesListRolesResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "RolesService"
        ]
      },
      "post": {
        "operationId": "RolesService_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesCreateRoleResp"
            }
          },
          "201": {
            "description": "",
            "schema": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rolesRole"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}": {
      "get": {
        "operationId": "RolesService_GetRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesGetRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "delete": {
        "operationId": "RolesService_RemoveRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesRemoveRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "patch": {
        "operationId": "RolesService_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesUpdateRoleResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "501": {
            "description": "Not implemented",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rolesRole"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/entitlements": {
      "get": {
        "operationId": "RolesService_ListRoleEntitlements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesListRoleEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Token-Pagination",
            "description": "Base64 encoded pagination info",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      },
      "patch": {
        "operationId": "RolesService_UpdateRoleEntitlements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesUpdateRoleEntitlementsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementsPatchReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesPermissions"
            }
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/entitlements/{entitlementId}": {
      "delete": {
        "operationId": "RolesService_RemoveRoleEntitlement",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesRemoveRoleEntitlementResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entitlementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/roles/{id}/groups": {
      "get": {
        "operationId": "RolesService_GetRoleGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rolesGetRoleGroupsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RolesService"
        ]
      }
    },
    "/api/v0/status": {
      "get": {
        "operationId": "StatusService_GetStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apistatusStatus"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    },
    "/api/v0/version": {
      "get": {
        "operationId": "StatusService_GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statusBuildInfo"
            }
          },
          "401": {
            "description": "Returned when the user is not authenticated.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "object",
              "format": "object"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/typesErrorResponse"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    }
  },
  "definitions": {
    "apistatusStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "buildInfo": {
          "$ref": "#/definitions/statusBuildInfo"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "groupsCreateGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsGetGroupIdentitiesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsGetGroupResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/groupsGroup"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsGetGroupRolesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "groupsIdentities": {
      "type": "object",
      "properties": {
        "identities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "groupsListGroupEntitlementsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsListGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "groupsRemoveGroupEntitlementResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupIdentityResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRemoveGroupRoleResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsRoles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "groupsUpdateGroupEntitlementsResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsUpdateGroupIdentitiesResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "groupsUpdateGroupResp": {
      "type": "object"
    },
    "groupsUpdateGroupRolesResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "identitiesCreateIdentityBody": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "object"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "recoveryAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesRecoveryIdentityAddress"
          }
        },
        "schemaId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "traits": {
          "type": "object"
        },
        "verifiableAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesVerifiableIdentityAddress"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "identitiesCreateIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesGetIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesIdentity": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "credentials": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/identitiesIdentityCredentials"
          }
        },
        "id": {
          "type": "string"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "organizationId": {
          "$ref": "#/definitions/identitiesNullableString"
        },
        "recoveryAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesRecoveryIdentityAddress"
          }
        },
        "schemaId": {
          "type": "string"
        },
        "schemaUrl": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateChangedAt": {
          "type": "string",
          "format": "date-time"
        },
        "traits": {
          "type": "object"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "verifiableAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesVerifiableIdentityAddress"
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesIdentityCredentials": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {}
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "int64"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesListIdentitiesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesNullableString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "isSet": {
          "type": "boolean"
        }
      }
    },
    "identitiesRecoveryIdentityAddress": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "via": {
          "type": "string"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "identitiesRemoveIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "identitiesUpdateIdentityBody": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "object"
        },
        "metadataAdmin": {
          "type": "object"
        },
        "metadataPublic": {
          "type": "object"
        },
        "schemaId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "traits": {
          "type": "object"
        },
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "identitiesUpdateIdentityResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identitiesIdentity"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "identitiesVerifiableIdentityAddress": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "via": {
          "type": "string"
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "idpsCreateIdpBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "object"
        }
      }
    },
    "idpsCreateIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsGetIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsIdp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "object"
        }
      }
    },
    "idpsListIdpsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsRemoveIdpResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "idpsUpdateIdpBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "issuerUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "microsoftTenant": {
          "type": "string"
        },
        "subjectSource": {
          "type": "string"
        },
        "appleTeamId": {
          "type": "string"
        },
        "applePrivateKeyId": {
          "type": "string"
        },
        "applePrivateKey": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mapperUrl": {
          "type": "string"
        },
        "requestedClaims": {
          "type": "object"
        }
      }
    },
    "idpsUpdateIdpResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/idpsIdp"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rolesCreateRoleResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rolesRole"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesGetRoleGroupsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesGetRoleResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rolesRole"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesListRoleEntitlementsResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesListRolesResp": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "Meta": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "rolesRemoveRoleEntitlementResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesRemoveRoleResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "rolesUpdateRoleEntitlementsResp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rolesUpdateRoleResp": {
      "type": "object"
    },
    "statusBuildInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commitHash": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "typesErrorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "typesPagination": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        }
      }
    },
    "typesPermission": {
      "type": "object",
      "properties": {
        "relation": {
          "type": "string"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "typesPermissions": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPermission"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "email": "",
        "openid": "",
        "profile": ""
      }
    }
  },
  "externalDocs": {
    "description": "REST API for the Admin UI service",
    "url": "https://github.com/canonical/identity-platform-admin-ui/blob/main/API.md"
  }
}
