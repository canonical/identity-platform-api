// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/authorization/service.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppAuthorizationService_GetAllowedAppsInGroup_FullMethodName      = "/identity.platform.api.authorization.AppAuthorizationService/GetAllowedAppsInGroup"
	AppAuthorizationService_AddAllowedAppToGroup_FullMethodName       = "/identity.platform.api.authorization.AppAuthorizationService/AddAllowedAppToGroup"
	AppAuthorizationService_RemoveAllowedAppFromGroup_FullMethodName  = "/identity.platform.api.authorization.AppAuthorizationService/RemoveAllowedAppFromGroup"
	AppAuthorizationService_RemoveAllowedAppsFromGroup_FullMethodName = "/identity.platform.api.authorization.AppAuthorizationService/RemoveAllowedAppsFromGroup"
	AppAuthorizationService_GetAllowedGroupsForApp_FullMethodName     = "/identity.platform.api.authorization.AppAuthorizationService/GetAllowedGroupsForApp"
	AppAuthorizationService_RemoveAllowedGroupsForApp_FullMethodName  = "/identity.platform.api.authorization.AppAuthorizationService/RemoveAllowedGroupsForApp"
)

// AppAuthorizationServiceClient is the client API for AppAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAuthorizationServiceClient interface {
	// GetAllowedAppsInGroup retrieves the list of apps allowed in a specific group.
	GetAllowedAppsInGroup(ctx context.Context, in *GetAllowedAppsInGroupReq, opts ...grpc.CallOption) (*GetAllowedAppsInGroupResp, error)
	// AddAllowedAppToGroup adds an app to the allowed list of a group.
	AddAllowedAppToGroup(ctx context.Context, in *AddAllowedAppToGroupReq, opts ...grpc.CallOption) (*AddAllowedAppToGroupResp, error)
	// RemoveAllowedAppFromGroup removes a specific app from the allowed list of a group.
	RemoveAllowedAppFromGroup(ctx context.Context, in *RemoveAllowedAppFromGroupReq, opts ...grpc.CallOption) (*RemoveAllowedAppFromGroupResp, error)
	// RemoveAllowedAppsFromGroup removes all apps from the allowed list of a group.
	RemoveAllowedAppsFromGroup(ctx context.Context, in *RemoveAllowedAppsFromGroupReq, opts ...grpc.CallOption) (*RemoveAllowedAppsFromGroupResp, error)
	// GetAllowedGroupsForApp retrieves the list of groups an app is allowed in.
	GetAllowedGroupsForApp(ctx context.Context, in *GetAllowedGroupsForAppReq, opts ...grpc.CallOption) (*GetAllowedGroupsForAppResp, error)
	// RemoveAllowedGroupsForApp removes an app from all groups it is allowed in.
	RemoveAllowedGroupsForApp(ctx context.Context, in *RemoveAllowedGroupsForAppReq, opts ...grpc.CallOption) (*RemoveAllowedGroupsForAppResp, error)
}

type appAuthorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAuthorizationServiceClient(cc grpc.ClientConnInterface) AppAuthorizationServiceClient {
	return &appAuthorizationServiceClient{cc}
}

func (c *appAuthorizationServiceClient) GetAllowedAppsInGroup(ctx context.Context, in *GetAllowedAppsInGroupReq, opts ...grpc.CallOption) (*GetAllowedAppsInGroupResp, error) {
	out := new(GetAllowedAppsInGroupResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_GetAllowedAppsInGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthorizationServiceClient) AddAllowedAppToGroup(ctx context.Context, in *AddAllowedAppToGroupReq, opts ...grpc.CallOption) (*AddAllowedAppToGroupResp, error) {
	out := new(AddAllowedAppToGroupResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_AddAllowedAppToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthorizationServiceClient) RemoveAllowedAppFromGroup(ctx context.Context, in *RemoveAllowedAppFromGroupReq, opts ...grpc.CallOption) (*RemoveAllowedAppFromGroupResp, error) {
	out := new(RemoveAllowedAppFromGroupResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_RemoveAllowedAppFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthorizationServiceClient) RemoveAllowedAppsFromGroup(ctx context.Context, in *RemoveAllowedAppsFromGroupReq, opts ...grpc.CallOption) (*RemoveAllowedAppsFromGroupResp, error) {
	out := new(RemoveAllowedAppsFromGroupResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_RemoveAllowedAppsFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthorizationServiceClient) GetAllowedGroupsForApp(ctx context.Context, in *GetAllowedGroupsForAppReq, opts ...grpc.CallOption) (*GetAllowedGroupsForAppResp, error) {
	out := new(GetAllowedGroupsForAppResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_GetAllowedGroupsForApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthorizationServiceClient) RemoveAllowedGroupsForApp(ctx context.Context, in *RemoveAllowedGroupsForAppReq, opts ...grpc.CallOption) (*RemoveAllowedGroupsForAppResp, error) {
	out := new(RemoveAllowedGroupsForAppResp)
	err := c.cc.Invoke(ctx, AppAuthorizationService_RemoveAllowedGroupsForApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAuthorizationServiceServer is the server API for AppAuthorizationService service.
// All implementations must embed UnimplementedAppAuthorizationServiceServer
// for forward compatibility
type AppAuthorizationServiceServer interface {
	// GetAllowedAppsInGroup retrieves the list of apps allowed in a specific group.
	GetAllowedAppsInGroup(context.Context, *GetAllowedAppsInGroupReq) (*GetAllowedAppsInGroupResp, error)
	// AddAllowedAppToGroup adds an app to the allowed list of a group.
	AddAllowedAppToGroup(context.Context, *AddAllowedAppToGroupReq) (*AddAllowedAppToGroupResp, error)
	// RemoveAllowedAppFromGroup removes a specific app from the allowed list of a group.
	RemoveAllowedAppFromGroup(context.Context, *RemoveAllowedAppFromGroupReq) (*RemoveAllowedAppFromGroupResp, error)
	// RemoveAllowedAppsFromGroup removes all apps from the allowed list of a group.
	RemoveAllowedAppsFromGroup(context.Context, *RemoveAllowedAppsFromGroupReq) (*RemoveAllowedAppsFromGroupResp, error)
	// GetAllowedGroupsForApp retrieves the list of groups an app is allowed in.
	GetAllowedGroupsForApp(context.Context, *GetAllowedGroupsForAppReq) (*GetAllowedGroupsForAppResp, error)
	// RemoveAllowedGroupsForApp removes an app from all groups it is allowed in.
	RemoveAllowedGroupsForApp(context.Context, *RemoveAllowedGroupsForAppReq) (*RemoveAllowedGroupsForAppResp, error)
	mustEmbedUnimplementedAppAuthorizationServiceServer()
}

// UnimplementedAppAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppAuthorizationServiceServer struct {
}

func (UnimplementedAppAuthorizationServiceServer) GetAllowedAppsInGroup(context.Context, *GetAllowedAppsInGroupReq) (*GetAllowedAppsInGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedAppsInGroup not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) AddAllowedAppToGroup(context.Context, *AddAllowedAppToGroupReq) (*AddAllowedAppToGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllowedAppToGroup not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) RemoveAllowedAppFromGroup(context.Context, *RemoveAllowedAppFromGroupReq) (*RemoveAllowedAppFromGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllowedAppFromGroup not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) RemoveAllowedAppsFromGroup(context.Context, *RemoveAllowedAppsFromGroupReq) (*RemoveAllowedAppsFromGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllowedAppsFromGroup not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) GetAllowedGroupsForApp(context.Context, *GetAllowedGroupsForAppReq) (*GetAllowedGroupsForAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedGroupsForApp not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) RemoveAllowedGroupsForApp(context.Context, *RemoveAllowedGroupsForAppReq) (*RemoveAllowedGroupsForAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllowedGroupsForApp not implemented")
}
func (UnimplementedAppAuthorizationServiceServer) mustEmbedUnimplementedAppAuthorizationServiceServer() {
}

// UnsafeAppAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAuthorizationServiceServer will
// result in compilation errors.
type UnsafeAppAuthorizationServiceServer interface {
	mustEmbedUnimplementedAppAuthorizationServiceServer()
}

func RegisterAppAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AppAuthorizationServiceServer) {
	s.RegisterService(&AppAuthorizationService_ServiceDesc, srv)
}

func _AppAuthorizationService_GetAllowedAppsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowedAppsInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).GetAllowedAppsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_GetAllowedAppsInGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).GetAllowedAppsInGroup(ctx, req.(*GetAllowedAppsInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAuthorizationService_AddAllowedAppToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAllowedAppToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).AddAllowedAppToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_AddAllowedAppToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).AddAllowedAppToGroup(ctx, req.(*AddAllowedAppToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAuthorizationService_RemoveAllowedAppFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllowedAppFromGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedAppFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_RemoveAllowedAppFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedAppFromGroup(ctx, req.(*RemoveAllowedAppFromGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAuthorizationService_RemoveAllowedAppsFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllowedAppsFromGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedAppsFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_RemoveAllowedAppsFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedAppsFromGroup(ctx, req.(*RemoveAllowedAppsFromGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAuthorizationService_GetAllowedGroupsForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowedGroupsForAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).GetAllowedGroupsForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_GetAllowedGroupsForApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).GetAllowedGroupsForApp(ctx, req.(*GetAllowedGroupsForAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAuthorizationService_RemoveAllowedGroupsForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllowedGroupsForAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedGroupsForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAuthorizationService_RemoveAllowedGroupsForApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAuthorizationServiceServer).RemoveAllowedGroupsForApp(ctx, req.(*RemoveAllowedGroupsForAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppAuthorizationService_ServiceDesc is the grpc.ServiceDesc for AppAuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.platform.api.authorization.AppAuthorizationService",
	HandlerType: (*AppAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllowedAppsInGroup",
			Handler:    _AppAuthorizationService_GetAllowedAppsInGroup_Handler,
		},
		{
			MethodName: "AddAllowedAppToGroup",
			Handler:    _AppAuthorizationService_AddAllowedAppToGroup_Handler,
		},
		{
			MethodName: "RemoveAllowedAppFromGroup",
			Handler:    _AppAuthorizationService_RemoveAllowedAppFromGroup_Handler,
		},
		{
			MethodName: "RemoveAllowedAppsFromGroup",
			Handler:    _AppAuthorizationService_RemoveAllowedAppsFromGroup_Handler,
		},
		{
			MethodName: "GetAllowedGroupsForApp",
			Handler:    _AppAuthorizationService_GetAllowedGroupsForApp_Handler,
		},
		{
			MethodName: "RemoveAllowedGroupsForApp",
			Handler:    _AppAuthorizationService_RemoveAllowedGroupsForApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/authorization/service.proto",
}
