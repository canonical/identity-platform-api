// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/authz_groups/service.proto

package authz_groups

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthzGroupsService_ListGroups_FullMethodName          = "/identity.platform.api.authz_groups.AuthzGroupsService/ListGroups"
	AuthzGroupsService_CreateGroup_FullMethodName         = "/identity.platform.api.authz_groups.AuthzGroupsService/CreateGroup"
	AuthzGroupsService_GetGroup_FullMethodName            = "/identity.platform.api.authz_groups.AuthzGroupsService/GetGroup"
	AuthzGroupsService_RemoveGroup_FullMethodName         = "/identity.platform.api.authz_groups.AuthzGroupsService/RemoveGroup"
	AuthzGroupsService_UpdateGroup_FullMethodName         = "/identity.platform.api.authz_groups.AuthzGroupsService/UpdateGroup"
	AuthzGroupsService_ListUsersInGroup_FullMethodName    = "/identity.platform.api.authz_groups.AuthzGroupsService/ListUsersInGroup"
	AuthzGroupsService_AddUsersToGroup_FullMethodName     = "/identity.platform.api.authz_groups.AuthzGroupsService/AddUsersToGroup"
	AuthzGroupsService_RemoveUserFromGroup_FullMethodName = "/identity.platform.api.authz_groups.AuthzGroupsService/RemoveUserFromGroup"
	AuthzGroupsService_ListUserGroups_FullMethodName      = "/identity.platform.api.authz_groups.AuthzGroupsService/ListUserGroups"
	AuthzGroupsService_AddUserToGroups_FullMethodName     = "/identity.platform.api.authz_groups.AuthzGroupsService/AddUserToGroups"
)

// AuthzGroupsServiceClient is the client API for AuthzGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzGroupsServiceClient interface {
	ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
	RemoveGroup(ctx context.Context, in *RemoveGroupReq, opts ...grpc.CallOption) (*RemoveGroupResp, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	ListUsersInGroup(ctx context.Context, in *ListUsersInGroupReq, opts ...grpc.CallOption) (*ListUsersInGroupResp, error)
	AddUsersToGroup(ctx context.Context, in *AddUsersToGroupReq, opts ...grpc.CallOption) (*AddUsersToGroupResp, error)
	RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupReq, opts ...grpc.CallOption) (*RemoveUserFromGroupResp, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsReq, opts ...grpc.CallOption) (*ListUserGroupsResp, error)
	AddUserToGroups(ctx context.Context, in *AddUserToGroupsReq, opts ...grpc.CallOption) (*AddUserToGroupsResp, error)
}

type authzGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzGroupsServiceClient(cc grpc.ClientConnInterface) AuthzGroupsServiceClient {
	return &authzGroupsServiceClient{cc}
}

func (c *authzGroupsServiceClient) ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error) {
	out := new(ListGroupsResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	out := new(GetGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) RemoveGroup(ctx context.Context, in *RemoveGroupReq, opts ...grpc.CallOption) (*RemoveGroupResp, error) {
	out := new(RemoveGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_RemoveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) ListUsersInGroup(ctx context.Context, in *ListUsersInGroupReq, opts ...grpc.CallOption) (*ListUsersInGroupResp, error) {
	out := new(ListUsersInGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_ListUsersInGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) AddUsersToGroup(ctx context.Context, in *AddUsersToGroupReq, opts ...grpc.CallOption) (*AddUsersToGroupResp, error) {
	out := new(AddUsersToGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_AddUsersToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) RemoveUserFromGroup(ctx context.Context, in *RemoveUserFromGroupReq, opts ...grpc.CallOption) (*RemoveUserFromGroupResp, error) {
	out := new(RemoveUserFromGroupResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_RemoveUserFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) ListUserGroups(ctx context.Context, in *ListUserGroupsReq, opts ...grpc.CallOption) (*ListUserGroupsResp, error) {
	out := new(ListUserGroupsResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_ListUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzGroupsServiceClient) AddUserToGroups(ctx context.Context, in *AddUserToGroupsReq, opts ...grpc.CallOption) (*AddUserToGroupsResp, error) {
	out := new(AddUserToGroupsResp)
	err := c.cc.Invoke(ctx, AuthzGroupsService_AddUserToGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzGroupsServiceServer is the server API for AuthzGroupsService service.
// All implementations must embed UnimplementedAuthzGroupsServiceServer
// for forward compatibility
type AuthzGroupsServiceServer interface {
	ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error)
	RemoveGroup(context.Context, *RemoveGroupReq) (*RemoveGroupResp, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	ListUsersInGroup(context.Context, *ListUsersInGroupReq) (*ListUsersInGroupResp, error)
	AddUsersToGroup(context.Context, *AddUsersToGroupReq) (*AddUsersToGroupResp, error)
	RemoveUserFromGroup(context.Context, *RemoveUserFromGroupReq) (*RemoveUserFromGroupResp, error)
	ListUserGroups(context.Context, *ListUserGroupsReq) (*ListUserGroupsResp, error)
	AddUserToGroups(context.Context, *AddUserToGroupsReq) (*AddUserToGroupsResp, error)
	mustEmbedUnimplementedAuthzGroupsServiceServer()
}

// UnimplementedAuthzGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthzGroupsServiceServer struct {
}

func (UnimplementedAuthzGroupsServiceServer) ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) RemoveGroup(context.Context, *RemoveGroupReq) (*RemoveGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) ListUsersInGroup(context.Context, *ListUsersInGroupReq) (*ListUsersInGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersInGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) AddUsersToGroup(context.Context, *AddUsersToGroupReq) (*AddUsersToGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) RemoveUserFromGroup(context.Context, *RemoveUserFromGroupReq) (*RemoveUserFromGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromGroup not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) ListUserGroups(context.Context, *ListUserGroupsReq) (*ListUserGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) AddUserToGroups(context.Context, *AddUserToGroupsReq) (*AddUserToGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToGroups not implemented")
}
func (UnimplementedAuthzGroupsServiceServer) mustEmbedUnimplementedAuthzGroupsServiceServer() {}

// UnsafeAuthzGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzGroupsServiceServer will
// result in compilation errors.
type UnsafeAuthzGroupsServiceServer interface {
	mustEmbedUnimplementedAuthzGroupsServiceServer()
}

func RegisterAuthzGroupsServiceServer(s grpc.ServiceRegistrar, srv AuthzGroupsServiceServer) {
	s.RegisterService(&AuthzGroupsService_ServiceDesc, srv)
}

func _AuthzGroupsService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).ListGroups(ctx, req.(*ListGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).GetGroup(ctx, req.(*GetGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_RemoveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).RemoveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_RemoveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).RemoveGroup(ctx, req.(*RemoveGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_ListUsersInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).ListUsersInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_ListUsersInGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).ListUsersInGroup(ctx, req.(*ListUsersInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_AddUsersToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).AddUsersToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_AddUsersToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).AddUsersToGroup(ctx, req.(*AddUsersToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).RemoveUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_RemoveUserFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).RemoveUserFromGroup(ctx, req.(*RemoveUserFromGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_ListUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).ListUserGroups(ctx, req.(*ListUserGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzGroupsService_AddUserToGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzGroupsServiceServer).AddUserToGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzGroupsService_AddUserToGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzGroupsServiceServer).AddUserToGroups(ctx, req.(*AddUserToGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzGroupsService_ServiceDesc is the grpc.ServiceDesc for AuthzGroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzGroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.platform.api.authz_groups.AuthzGroupsService",
	HandlerType: (*AuthzGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGroups",
			Handler:    _AuthzGroupsService_ListGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AuthzGroupsService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AuthzGroupsService_GetGroup_Handler,
		},
		{
			MethodName: "RemoveGroup",
			Handler:    _AuthzGroupsService_RemoveGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AuthzGroupsService_UpdateGroup_Handler,
		},
		{
			MethodName: "ListUsersInGroup",
			Handler:    _AuthzGroupsService_ListUsersInGroup_Handler,
		},
		{
			MethodName: "AddUsersToGroup",
			Handler:    _AuthzGroupsService_AddUsersToGroup_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _AuthzGroupsService_RemoveUserFromGroup_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _AuthzGroupsService_ListUserGroups_Handler,
		},
		{
			MethodName: "AddUserToGroups",
			Handler:    _AuthzGroupsService_AddUserToGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/authz_groups/service.proto",
}
