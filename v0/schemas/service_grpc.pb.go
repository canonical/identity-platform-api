// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/schemas/service.proto

package schemas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchemasService_ListSchemas_FullMethodName         = "/SchemasService/ListSchemas"
	SchemasService_GetSchema_FullMethodName           = "/SchemasService/GetSchema"
	SchemasService_CreateSchema_FullMethodName        = "/SchemasService/CreateSchema"
	SchemasService_UpdateSchema_FullMethodName        = "/SchemasService/UpdateSchema"
	SchemasService_RemoveSchema_FullMethodName        = "/SchemasService/RemoveSchema"
	SchemasService_GetDefaultSchema_FullMethodName    = "/SchemasService/GetDefaultSchema"
	SchemasService_UpdateDefaultSchema_FullMethodName = "/SchemasService/UpdateDefaultSchema"
)

// SchemasServiceClient is the client API for SchemasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemasServiceClient interface {
	ListSchemas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSchemasResp, error)
	GetSchema(ctx context.Context, in *GetSchemaReq, opts ...grpc.CallOption) (*GetSchemaResp, error)
	CreateSchema(ctx context.Context, in *CreateSchemaReq, opts ...grpc.CallOption) (*CreateSchemaResp, error)
	UpdateSchema(ctx context.Context, in *UpdateSchemaReq, opts ...grpc.CallOption) (*UpdateSchemaResp, error)
	RemoveSchema(ctx context.Context, in *RemoveSchemaReq, opts ...grpc.CallOption) (*RemoveSchemaResp, error)
	GetDefaultSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDefaultSchemaResp, error)
	UpdateDefaultSchema(ctx context.Context, in *UpdateDefaultSchemaReq, opts ...grpc.CallOption) (*UpdateDefaultSchemaResp, error)
}

type schemasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemasServiceClient(cc grpc.ClientConnInterface) SchemasServiceClient {
	return &schemasServiceClient{cc}
}

func (c *schemasServiceClient) ListSchemas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSchemasResp, error) {
	out := new(ListSchemasResp)
	err := c.cc.Invoke(ctx, SchemasService_ListSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) GetSchema(ctx context.Context, in *GetSchemaReq, opts ...grpc.CallOption) (*GetSchemaResp, error) {
	out := new(GetSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_GetSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaReq, opts ...grpc.CallOption) (*CreateSchemaResp, error) {
	out := new(CreateSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_CreateSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) UpdateSchema(ctx context.Context, in *UpdateSchemaReq, opts ...grpc.CallOption) (*UpdateSchemaResp, error) {
	out := new(UpdateSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_UpdateSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) RemoveSchema(ctx context.Context, in *RemoveSchemaReq, opts ...grpc.CallOption) (*RemoveSchemaResp, error) {
	out := new(RemoveSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_RemoveSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) GetDefaultSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDefaultSchemaResp, error) {
	out := new(GetDefaultSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_GetDefaultSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemasServiceClient) UpdateDefaultSchema(ctx context.Context, in *UpdateDefaultSchemaReq, opts ...grpc.CallOption) (*UpdateDefaultSchemaResp, error) {
	out := new(UpdateDefaultSchemaResp)
	err := c.cc.Invoke(ctx, SchemasService_UpdateDefaultSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemasServiceServer is the server API for SchemasService service.
// All implementations must embed UnimplementedSchemasServiceServer
// for forward compatibility
type SchemasServiceServer interface {
	ListSchemas(context.Context, *emptypb.Empty) (*ListSchemasResp, error)
	GetSchema(context.Context, *GetSchemaReq) (*GetSchemaResp, error)
	CreateSchema(context.Context, *CreateSchemaReq) (*CreateSchemaResp, error)
	UpdateSchema(context.Context, *UpdateSchemaReq) (*UpdateSchemaResp, error)
	RemoveSchema(context.Context, *RemoveSchemaReq) (*RemoveSchemaResp, error)
	GetDefaultSchema(context.Context, *emptypb.Empty) (*GetDefaultSchemaResp, error)
	UpdateDefaultSchema(context.Context, *UpdateDefaultSchemaReq) (*UpdateDefaultSchemaResp, error)
	mustEmbedUnimplementedSchemasServiceServer()
}

// UnimplementedSchemasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemasServiceServer struct {
}

func (UnimplementedSchemasServiceServer) ListSchemas(context.Context, *emptypb.Empty) (*ListSchemasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedSchemasServiceServer) GetSchema(context.Context, *GetSchemaReq) (*GetSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedSchemasServiceServer) CreateSchema(context.Context, *CreateSchemaReq) (*CreateSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedSchemasServiceServer) UpdateSchema(context.Context, *UpdateSchemaReq) (*UpdateSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedSchemasServiceServer) RemoveSchema(context.Context, *RemoveSchemaReq) (*RemoveSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSchema not implemented")
}
func (UnimplementedSchemasServiceServer) GetDefaultSchema(context.Context, *emptypb.Empty) (*GetDefaultSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultSchema not implemented")
}
func (UnimplementedSchemasServiceServer) UpdateDefaultSchema(context.Context, *UpdateDefaultSchemaReq) (*UpdateDefaultSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultSchema not implemented")
}
func (UnimplementedSchemasServiceServer) mustEmbedUnimplementedSchemasServiceServer() {}

// UnsafeSchemasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemasServiceServer will
// result in compilation errors.
type UnsafeSchemasServiceServer interface {
	mustEmbedUnimplementedSchemasServiceServer()
}

func RegisterSchemasServiceServer(s grpc.ServiceRegistrar, srv SchemasServiceServer) {
	s.RegisterService(&SchemasService_ServiceDesc, srv)
}

func _SchemasService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_ListSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).ListSchemas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).GetSchema(ctx, req.(*GetSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_CreateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).CreateSchema(ctx, req.(*CreateSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_UpdateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).UpdateSchema(ctx, req.(*UpdateSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_RemoveSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).RemoveSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_RemoveSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).RemoveSchema(ctx, req.(*RemoveSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_GetDefaultSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).GetDefaultSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_GetDefaultSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).GetDefaultSchema(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemasService_UpdateDefaultSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServiceServer).UpdateDefaultSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemasService_UpdateDefaultSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServiceServer).UpdateDefaultSchema(ctx, req.(*UpdateDefaultSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemasService_ServiceDesc is the grpc.ServiceDesc for SchemasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SchemasService",
	HandlerType: (*SchemasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSchemas",
			Handler:    _SchemasService_ListSchemas_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _SchemasService_GetSchema_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _SchemasService_CreateSchema_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _SchemasService_UpdateSchema_Handler,
		},
		{
			MethodName: "RemoveSchema",
			Handler:    _SchemasService_RemoveSchema_Handler,
		},
		{
			MethodName: "GetDefaultSchema",
			Handler:    _SchemasService_GetDefaultSchema_Handler,
		},
		{
			MethodName: "UpdateDefaultSchema",
			Handler:    _SchemasService_UpdateDefaultSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/schemas/service.proto",
}
