// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/identities/service.proto

package identities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentitiesService_ListIdentities_FullMethodName = "/identity.platform.api.identities.IdentitiesService/ListIdentities"
	IdentitiesService_GetIdentity_FullMethodName    = "/identity.platform.api.identities.IdentitiesService/GetIdentity"
	IdentitiesService_CreateIdentity_FullMethodName = "/identity.platform.api.identities.IdentitiesService/CreateIdentity"
	IdentitiesService_UpdateIdentity_FullMethodName = "/identity.platform.api.identities.IdentitiesService/UpdateIdentity"
	IdentitiesService_RemoveIdentity_FullMethodName = "/identity.platform.api.identities.IdentitiesService/RemoveIdentity"
)

// IdentitiesServiceClient is the client API for IdentitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentitiesServiceClient interface {
	ListIdentities(ctx context.Context, in *ListIdentitiesReq, opts ...grpc.CallOption) (*ListIdentitiesResp, error)
	GetIdentity(ctx context.Context, in *GetIdentityReq, opts ...grpc.CallOption) (*GetIdentityResp, error)
	CreateIdentity(ctx context.Context, in *CreateIdentityReq, opts ...grpc.CallOption) (*CreateIdentityResp, error)
	UpdateIdentity(ctx context.Context, in *UpdateIdentityReq, opts ...grpc.CallOption) (*UpdateIdentityResp, error)
	RemoveIdentity(ctx context.Context, in *RemoveIdentityReq, opts ...grpc.CallOption) (*RemoveIdentityResp, error)
}

type identitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitiesServiceClient(cc grpc.ClientConnInterface) IdentitiesServiceClient {
	return &identitiesServiceClient{cc}
}

func (c *identitiesServiceClient) ListIdentities(ctx context.Context, in *ListIdentitiesReq, opts ...grpc.CallOption) (*ListIdentitiesResp, error) {
	out := new(ListIdentitiesResp)
	err := c.cc.Invoke(ctx, IdentitiesService_ListIdentities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesServiceClient) GetIdentity(ctx context.Context, in *GetIdentityReq, opts ...grpc.CallOption) (*GetIdentityResp, error) {
	out := new(GetIdentityResp)
	err := c.cc.Invoke(ctx, IdentitiesService_GetIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesServiceClient) CreateIdentity(ctx context.Context, in *CreateIdentityReq, opts ...grpc.CallOption) (*CreateIdentityResp, error) {
	out := new(CreateIdentityResp)
	err := c.cc.Invoke(ctx, IdentitiesService_CreateIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesServiceClient) UpdateIdentity(ctx context.Context, in *UpdateIdentityReq, opts ...grpc.CallOption) (*UpdateIdentityResp, error) {
	out := new(UpdateIdentityResp)
	err := c.cc.Invoke(ctx, IdentitiesService_UpdateIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitiesServiceClient) RemoveIdentity(ctx context.Context, in *RemoveIdentityReq, opts ...grpc.CallOption) (*RemoveIdentityResp, error) {
	out := new(RemoveIdentityResp)
	err := c.cc.Invoke(ctx, IdentitiesService_RemoveIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitiesServiceServer is the server API for IdentitiesService service.
// All implementations must embed UnimplementedIdentitiesServiceServer
// for forward compatibility
type IdentitiesServiceServer interface {
	ListIdentities(context.Context, *ListIdentitiesReq) (*ListIdentitiesResp, error)
	GetIdentity(context.Context, *GetIdentityReq) (*GetIdentityResp, error)
	CreateIdentity(context.Context, *CreateIdentityReq) (*CreateIdentityResp, error)
	UpdateIdentity(context.Context, *UpdateIdentityReq) (*UpdateIdentityResp, error)
	RemoveIdentity(context.Context, *RemoveIdentityReq) (*RemoveIdentityResp, error)
	mustEmbedUnimplementedIdentitiesServiceServer()
}

// UnimplementedIdentitiesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentitiesServiceServer struct {
}

func (UnimplementedIdentitiesServiceServer) ListIdentities(context.Context, *ListIdentitiesReq) (*ListIdentitiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentities not implemented")
}
func (UnimplementedIdentitiesServiceServer) GetIdentity(context.Context, *GetIdentityReq) (*GetIdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedIdentitiesServiceServer) CreateIdentity(context.Context, *CreateIdentityReq) (*CreateIdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentity not implemented")
}
func (UnimplementedIdentitiesServiceServer) UpdateIdentity(context.Context, *UpdateIdentityReq) (*UpdateIdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentity not implemented")
}
func (UnimplementedIdentitiesServiceServer) RemoveIdentity(context.Context, *RemoveIdentityReq) (*RemoveIdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIdentity not implemented")
}
func (UnimplementedIdentitiesServiceServer) mustEmbedUnimplementedIdentitiesServiceServer() {}

// UnsafeIdentitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentitiesServiceServer will
// result in compilation errors.
type UnsafeIdentitiesServiceServer interface {
	mustEmbedUnimplementedIdentitiesServiceServer()
}

func RegisterIdentitiesServiceServer(s grpc.ServiceRegistrar, srv IdentitiesServiceServer) {
	s.RegisterService(&IdentitiesService_ServiceDesc, srv)
}

func _IdentitiesService_ListIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).ListIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_ListIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).ListIdentities(ctx, req.(*ListIdentitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitiesService_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).GetIdentity(ctx, req.(*GetIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitiesService_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_CreateIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).CreateIdentity(ctx, req.(*CreateIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitiesService_UpdateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).UpdateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_UpdateIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).UpdateIdentity(ctx, req.(*UpdateIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitiesService_RemoveIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitiesServiceServer).RemoveIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentitiesService_RemoveIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitiesServiceServer).RemoveIdentity(ctx, req.(*RemoveIdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentitiesService_ServiceDesc is the grpc.ServiceDesc for IdentitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.platform.api.identities.IdentitiesService",
	HandlerType: (*IdentitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIdentities",
			Handler:    _IdentitiesService_ListIdentities_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _IdentitiesService_GetIdentity_Handler,
		},
		{
			MethodName: "CreateIdentity",
			Handler:    _IdentitiesService_CreateIdentity_Handler,
		},
		{
			MethodName: "UpdateIdentity",
			Handler:    _IdentitiesService_UpdateIdentity_Handler,
		},
		{
			MethodName: "RemoveIdentity",
			Handler:    _IdentitiesService_RemoveIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/identities/service.proto",
}
