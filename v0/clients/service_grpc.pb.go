// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/clients/service.proto

package clients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientsService_ListClients_FullMethodName  = "/identity.platform.api.clients.ClientsService/ListClients"
	ClientsService_GetClient_FullMethodName    = "/identity.platform.api.clients.ClientsService/GetClient"
	ClientsService_CreateClient_FullMethodName = "/identity.platform.api.clients.ClientsService/CreateClient"
	ClientsService_UpdateClient_FullMethodName = "/identity.platform.api.clients.ClientsService/UpdateClient"
	ClientsService_RemoveClient_FullMethodName = "/identity.platform.api.clients.ClientsService/RemoveClient"
)

// ClientsServiceClient is the client API for ClientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsServiceClient interface {
	ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsResp, error)
	GetClient(ctx context.Context, in *GetClientReq, opts ...grpc.CallOption) (*GetClientResp, error)
	CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*CreateClientResp, error)
	UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error)
	RemoveClient(ctx context.Context, in *RemoveClientReq, opts ...grpc.CallOption) (*RemoveClientResp, error)
}

type clientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsServiceClient(cc grpc.ClientConnInterface) ClientsServiceClient {
	return &clientsServiceClient{cc}
}

func (c *clientsServiceClient) ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsResp, error) {
	out := new(ListClientsResp)
	err := c.cc.Invoke(ctx, ClientsService_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) GetClient(ctx context.Context, in *GetClientReq, opts ...grpc.CallOption) (*GetClientResp, error) {
	out := new(GetClientResp)
	err := c.cc.Invoke(ctx, ClientsService_GetClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) CreateClient(ctx context.Context, in *CreateClientReq, opts ...grpc.CallOption) (*CreateClientResp, error) {
	out := new(CreateClientResp)
	err := c.cc.Invoke(ctx, ClientsService_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error) {
	out := new(UpdateClientResp)
	err := c.cc.Invoke(ctx, ClientsService_UpdateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) RemoveClient(ctx context.Context, in *RemoveClientReq, opts ...grpc.CallOption) (*RemoveClientResp, error) {
	out := new(RemoveClientResp)
	err := c.cc.Invoke(ctx, ClientsService_RemoveClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsServiceServer is the server API for ClientsService service.
// All implementations must embed UnimplementedClientsServiceServer
// for forward compatibility
type ClientsServiceServer interface {
	ListClients(context.Context, *ListClientsReq) (*ListClientsResp, error)
	GetClient(context.Context, *GetClientReq) (*GetClientResp, error)
	CreateClient(context.Context, *CreateClientReq) (*CreateClientResp, error)
	UpdateClient(context.Context, *UpdateClientReq) (*UpdateClientResp, error)
	RemoveClient(context.Context, *RemoveClientReq) (*RemoveClientResp, error)
	mustEmbedUnimplementedClientsServiceServer()
}

// UnimplementedClientsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientsServiceServer struct {
}

func (UnimplementedClientsServiceServer) ListClients(context.Context, *ListClientsReq) (*ListClientsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedClientsServiceServer) GetClient(context.Context, *GetClientReq) (*GetClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedClientsServiceServer) CreateClient(context.Context, *CreateClientReq) (*CreateClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedClientsServiceServer) UpdateClient(context.Context, *UpdateClientReq) (*UpdateClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedClientsServiceServer) RemoveClient(context.Context, *RemoveClientReq) (*RemoveClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedClientsServiceServer) mustEmbedUnimplementedClientsServiceServer() {}

// UnsafeClientsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsServiceServer will
// result in compilation errors.
type UnsafeClientsServiceServer interface {
	mustEmbedUnimplementedClientsServiceServer()
}

func RegisterClientsServiceServer(s grpc.ServiceRegistrar, srv ClientsServiceServer) {
	s.RegisterService(&ClientsService_ServiceDesc, srv)
}

func _ClientsService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).ListClients(ctx, req.(*ListClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).GetClient(ctx, req.(*GetClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).CreateClient(ctx, req.(*CreateClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).UpdateClient(ctx, req.(*UpdateClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientsService_RemoveClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).RemoveClient(ctx, req.(*RemoveClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientsService_ServiceDesc is the grpc.ServiceDesc for ClientsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.platform.api.clients.ClientsService",
	HandlerType: (*ClientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClients",
			Handler:    _ClientsService_ListClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientsService_GetClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _ClientsService_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientsService_UpdateClient_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _ClientsService_RemoveClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/clients/service.proto",
}
