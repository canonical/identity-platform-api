// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v0/idps/model.proto

package idps

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Idp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider          string           `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Label             *string          `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	ClientId          string           `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      *string          `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
	IssuerUrl         *string          `protobuf:"bytes,6,opt,name=issuer_url,json=issuerUrl,proto3,oneof" json:"issuer_url,omitempty"`
	AuthUrl           *string          `protobuf:"bytes,7,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	TokenUrl          *string          `protobuf:"bytes,8,opt,name=token_url,json=tokenUrl,proto3,oneof" json:"token_url,omitempty"`
	MicrosoftTenant   *string          `protobuf:"bytes,9,opt,name=microsoft_tenant,json=microsoftTenant,proto3,oneof" json:"microsoft_tenant,omitempty"`
	SubjectSource     *string          `protobuf:"bytes,10,opt,name=subject_source,json=subjectSource,proto3,oneof" json:"subject_source,omitempty"`
	AppleTeamId       *string          `protobuf:"bytes,11,opt,name=apple_team_id,json=appleTeamId,proto3,oneof" json:"apple_team_id,omitempty"`
	ApplePrivateKeyId *string          `protobuf:"bytes,12,opt,name=apple_private_key_id,json=applePrivateKeyId,proto3,oneof" json:"apple_private_key_id,omitempty"`
	ApplePrivateKey   *string          `protobuf:"bytes,13,opt,name=apple_private_key,json=applePrivateKey,proto3,oneof" json:"apple_private_key,omitempty"`
	Scope             []string         `protobuf:"bytes,14,rep,name=scope,proto3" json:"scope,omitempty"`
	MapperUrl         *string          `protobuf:"bytes,15,opt,name=mapper_url,json=mapperUrl,proto3,oneof" json:"mapper_url,omitempty"`
	RequestedClaims   *structpb.Struct `protobuf:"bytes,16,opt,name=requested_claims,json=requestedClaims,proto3,oneof" json:"requested_claims,omitempty"`
}

func (x *Idp) Reset() {
	*x = Idp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Idp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Idp) ProtoMessage() {}

func (x *Idp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Idp.ProtoReflect.Descriptor instead.
func (*Idp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{0}
}

func (x *Idp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Idp) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Idp) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Idp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Idp) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *Idp) GetIssuerUrl() string {
	if x != nil && x.IssuerUrl != nil {
		return *x.IssuerUrl
	}
	return ""
}

func (x *Idp) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *Idp) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *Idp) GetMicrosoftTenant() string {
	if x != nil && x.MicrosoftTenant != nil {
		return *x.MicrosoftTenant
	}
	return ""
}

func (x *Idp) GetSubjectSource() string {
	if x != nil && x.SubjectSource != nil {
		return *x.SubjectSource
	}
	return ""
}

func (x *Idp) GetAppleTeamId() string {
	if x != nil && x.AppleTeamId != nil {
		return *x.AppleTeamId
	}
	return ""
}

func (x *Idp) GetApplePrivateKeyId() string {
	if x != nil && x.ApplePrivateKeyId != nil {
		return *x.ApplePrivateKeyId
	}
	return ""
}

func (x *Idp) GetApplePrivateKey() string {
	if x != nil && x.ApplePrivateKey != nil {
		return *x.ApplePrivateKey
	}
	return ""
}

func (x *Idp) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Idp) GetMapperUrl() string {
	if x != nil && x.MapperUrl != nil {
		return *x.MapperUrl
	}
	return ""
}

func (x *Idp) GetRequestedClaims() *structpb.Struct {
	if x != nil {
		return x.RequestedClaims
	}
	return nil
}

type CreateIdpBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider          string           `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Label             *string          `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	ClientId          string           `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      *string          `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
	IssuerUrl         *string          `protobuf:"bytes,6,opt,name=issuer_url,json=issuerUrl,proto3,oneof" json:"issuer_url,omitempty"`
	AuthUrl           *string          `protobuf:"bytes,7,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	TokenUrl          *string          `protobuf:"bytes,8,opt,name=token_url,json=tokenUrl,proto3,oneof" json:"token_url,omitempty"`
	MicrosoftTenant   *string          `protobuf:"bytes,9,opt,name=microsoft_tenant,json=microsoftTenant,proto3,oneof" json:"microsoft_tenant,omitempty"`
	SubjectSource     *string          `protobuf:"bytes,10,opt,name=subject_source,json=subjectSource,proto3,oneof" json:"subject_source,omitempty"`
	AppleTeamId       *string          `protobuf:"bytes,11,opt,name=apple_team_id,json=appleTeamId,proto3,oneof" json:"apple_team_id,omitempty"`
	ApplePrivateKeyId *string          `protobuf:"bytes,12,opt,name=apple_private_key_id,json=applePrivateKeyId,proto3,oneof" json:"apple_private_key_id,omitempty"`
	ApplePrivateKey   *string          `protobuf:"bytes,13,opt,name=apple_private_key,json=applePrivateKey,proto3,oneof" json:"apple_private_key,omitempty"`
	Scope             []string         `protobuf:"bytes,14,rep,name=scope,proto3" json:"scope,omitempty"`
	MapperUrl         *string          `protobuf:"bytes,15,opt,name=mapper_url,json=mapperUrl,proto3,oneof" json:"mapper_url,omitempty"`
	RequestedClaims   *structpb.Struct `protobuf:"bytes,16,opt,name=requested_claims,json=requestedClaims,proto3,oneof" json:"requested_claims,omitempty"`
}

func (x *CreateIdpBody) Reset() {
	*x = CreateIdpBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdpBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdpBody) ProtoMessage() {}

func (x *CreateIdpBody) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdpBody.ProtoReflect.Descriptor instead.
func (*CreateIdpBody) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIdpBody) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateIdpBody) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateIdpBody) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CreateIdpBody) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateIdpBody) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *CreateIdpBody) GetIssuerUrl() string {
	if x != nil && x.IssuerUrl != nil {
		return *x.IssuerUrl
	}
	return ""
}

func (x *CreateIdpBody) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *CreateIdpBody) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *CreateIdpBody) GetMicrosoftTenant() string {
	if x != nil && x.MicrosoftTenant != nil {
		return *x.MicrosoftTenant
	}
	return ""
}

func (x *CreateIdpBody) GetSubjectSource() string {
	if x != nil && x.SubjectSource != nil {
		return *x.SubjectSource
	}
	return ""
}

func (x *CreateIdpBody) GetAppleTeamId() string {
	if x != nil && x.AppleTeamId != nil {
		return *x.AppleTeamId
	}
	return ""
}

func (x *CreateIdpBody) GetApplePrivateKeyId() string {
	if x != nil && x.ApplePrivateKeyId != nil {
		return *x.ApplePrivateKeyId
	}
	return ""
}

func (x *CreateIdpBody) GetApplePrivateKey() string {
	if x != nil && x.ApplePrivateKey != nil {
		return *x.ApplePrivateKey
	}
	return ""
}

func (x *CreateIdpBody) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *CreateIdpBody) GetMapperUrl() string {
	if x != nil && x.MapperUrl != nil {
		return *x.MapperUrl
	}
	return ""
}

func (x *CreateIdpBody) GetRequestedClaims() *structpb.Struct {
	if x != nil {
		return x.RequestedClaims
	}
	return nil
}

type UpdateIdpBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider          string           `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Label             *string          `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	ClientId          string           `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret      *string          `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
	IssuerUrl         *string          `protobuf:"bytes,6,opt,name=issuer_url,json=issuerUrl,proto3,oneof" json:"issuer_url,omitempty"`
	AuthUrl           *string          `protobuf:"bytes,7,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	TokenUrl          *string          `protobuf:"bytes,8,opt,name=token_url,json=tokenUrl,proto3,oneof" json:"token_url,omitempty"`
	MicrosoftTenant   *string          `protobuf:"bytes,9,opt,name=microsoft_tenant,json=microsoftTenant,proto3,oneof" json:"microsoft_tenant,omitempty"`
	SubjectSource     *string          `protobuf:"bytes,10,opt,name=subject_source,json=subjectSource,proto3,oneof" json:"subject_source,omitempty"`
	AppleTeamId       *string          `protobuf:"bytes,11,opt,name=apple_team_id,json=appleTeamId,proto3,oneof" json:"apple_team_id,omitempty"`
	ApplePrivateKeyId *string          `protobuf:"bytes,12,opt,name=apple_private_key_id,json=applePrivateKeyId,proto3,oneof" json:"apple_private_key_id,omitempty"`
	ApplePrivateKey   *string          `protobuf:"bytes,13,opt,name=apple_private_key,json=applePrivateKey,proto3,oneof" json:"apple_private_key,omitempty"`
	Scope             []string         `protobuf:"bytes,14,rep,name=scope,proto3" json:"scope,omitempty"`
	MapperUrl         *string          `protobuf:"bytes,15,opt,name=mapper_url,json=mapperUrl,proto3,oneof" json:"mapper_url,omitempty"`
	RequestedClaims   *structpb.Struct `protobuf:"bytes,16,opt,name=requested_claims,json=requestedClaims,proto3,oneof" json:"requested_claims,omitempty"`
}

func (x *UpdateIdpBody) Reset() {
	*x = UpdateIdpBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdpBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdpBody) ProtoMessage() {}

func (x *UpdateIdpBody) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdpBody.ProtoReflect.Descriptor instead.
func (*UpdateIdpBody) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateIdpBody) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIdpBody) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateIdpBody) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *UpdateIdpBody) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateIdpBody) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *UpdateIdpBody) GetIssuerUrl() string {
	if x != nil && x.IssuerUrl != nil {
		return *x.IssuerUrl
	}
	return ""
}

func (x *UpdateIdpBody) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *UpdateIdpBody) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *UpdateIdpBody) GetMicrosoftTenant() string {
	if x != nil && x.MicrosoftTenant != nil {
		return *x.MicrosoftTenant
	}
	return ""
}

func (x *UpdateIdpBody) GetSubjectSource() string {
	if x != nil && x.SubjectSource != nil {
		return *x.SubjectSource
	}
	return ""
}

func (x *UpdateIdpBody) GetAppleTeamId() string {
	if x != nil && x.AppleTeamId != nil {
		return *x.AppleTeamId
	}
	return ""
}

func (x *UpdateIdpBody) GetApplePrivateKeyId() string {
	if x != nil && x.ApplePrivateKeyId != nil {
		return *x.ApplePrivateKeyId
	}
	return ""
}

func (x *UpdateIdpBody) GetApplePrivateKey() string {
	if x != nil && x.ApplePrivateKey != nil {
		return *x.ApplePrivateKey
	}
	return ""
}

func (x *UpdateIdpBody) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *UpdateIdpBody) GetMapperUrl() string {
	if x != nil && x.MapperUrl != nil {
		return *x.MapperUrl
	}
	return ""
}

func (x *UpdateIdpBody) GetRequestedClaims() *structpb.Struct {
	if x != nil {
		return x.RequestedClaims
	}
	return nil
}

type ListIdpsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*Idp  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Status  int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ListIdpsResp) Reset() {
	*x = ListIdpsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIdpsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdpsResp) ProtoMessage() {}

func (x *ListIdpsResp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdpsResp.ProtoReflect.Descriptor instead.
func (*ListIdpsResp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{3}
}

func (x *ListIdpsResp) GetData() []*Idp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListIdpsResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListIdpsResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetIdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIdpReq) Reset() {
	*x = GetIdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdpReq) ProtoMessage() {}

func (x *GetIdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdpReq.ProtoReflect.Descriptor instead.
func (*GetIdpReq) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{4}
}

func (x *GetIdpReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIdpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*Idp  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Status  int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *GetIdpResp) Reset() {
	*x = GetIdpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdpResp) ProtoMessage() {}

func (x *GetIdpResp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdpResp.ProtoReflect.Descriptor instead.
func (*GetIdpResp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{5}
}

func (x *GetIdpResp) GetData() []*Idp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetIdpResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetIdpResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CreateIdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idp *CreateIdpBody `protobuf:"bytes,1,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *CreateIdpReq) Reset() {
	*x = CreateIdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdpReq) ProtoMessage() {}

func (x *CreateIdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdpReq.ProtoReflect.Descriptor instead.
func (*CreateIdpReq) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{6}
}

func (x *CreateIdpReq) GetIdp() *CreateIdpBody {
	if x != nil {
		return x.Idp
	}
	return nil
}

type CreateIdpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*Idp  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Status  int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CreateIdpResp) Reset() {
	*x = CreateIdpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdpResp) ProtoMessage() {}

func (x *CreateIdpResp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdpResp.ProtoReflect.Descriptor instead.
func (*CreateIdpResp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{7}
}

func (x *CreateIdpResp) GetData() []*Idp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateIdpResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateIdpResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type UpdateIdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Idp *UpdateIdpBody `protobuf:"bytes,2,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *UpdateIdpReq) Reset() {
	*x = UpdateIdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdpReq) ProtoMessage() {}

func (x *UpdateIdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdpReq.ProtoReflect.Descriptor instead.
func (*UpdateIdpReq) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateIdpReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIdpReq) GetIdp() *UpdateIdpBody {
	if x != nil {
		return x.Idp
	}
	return nil
}

type UpdateIdpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*Idp  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Status  int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *UpdateIdpResp) Reset() {
	*x = UpdateIdpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdpResp) ProtoMessage() {}

func (x *UpdateIdpResp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdpResp.ProtoReflect.Descriptor instead.
func (*UpdateIdpResp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateIdpResp) GetData() []*Idp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateIdpResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateIdpResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type RemoveIdpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveIdpReq) Reset() {
	*x = RemoveIdpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIdpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIdpReq) ProtoMessage() {}

func (x *RemoveIdpReq) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIdpReq.ProtoReflect.Descriptor instead.
func (*RemoveIdpReq) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveIdpReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveIdpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *RemoveIdpResp) Reset() {
	*x = RemoveIdpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_idps_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIdpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIdpResp) ProtoMessage() {}

func (x *RemoveIdpResp) ProtoReflect() protoreflect.Message {
	mi := &file_v0_idps_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIdpResp.ProtoReflect.Descriptor instead.
func (*RemoveIdpResp) Descriptor() ([]byte, []int) {
	return file_v0_idps_model_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveIdpResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RemoveIdpResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_v0_idps_model_proto protoreflect.FileDescriptor

var file_v0_idps_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x76, 0x30, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x64, 0x70,
	0x73, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x06, 0x0a, 0x03, 0x49, 0x64, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xc5, 0x06,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x0b, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xc5, 0x06, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
	0x66, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x0b, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x64, 0x70, 0x73, 0x2e, 0x49, 0x64, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x49, 0x64, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x64, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x64, 0x70, 0x73, 0x2e, 0x49, 0x64,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x64,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x64, 0x70, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x70, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x03, 0x69, 0x64, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x64, 0x70, 0x73, 0x2e, 0x49, 0x64, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x64, 0x70, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x03, 0x69, 0x64, 0x70, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x64, 0x70, 0x73, 0x2e, 0x49, 0x64, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x64, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x64, 0x70, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v0_idps_model_proto_rawDescOnce sync.Once
	file_v0_idps_model_proto_rawDescData = file_v0_idps_model_proto_rawDesc
)

func file_v0_idps_model_proto_rawDescGZIP() []byte {
	file_v0_idps_model_proto_rawDescOnce.Do(func() {
		file_v0_idps_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_v0_idps_model_proto_rawDescData)
	})
	return file_v0_idps_model_proto_rawDescData
}

var file_v0_idps_model_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v0_idps_model_proto_goTypes = []interface{}{
	(*Idp)(nil),             // 0: identity.platform.api.idps.Idp
	(*CreateIdpBody)(nil),   // 1: identity.platform.api.idps.CreateIdpBody
	(*UpdateIdpBody)(nil),   // 2: identity.platform.api.idps.UpdateIdpBody
	(*ListIdpsResp)(nil),    // 3: identity.platform.api.idps.ListIdpsResp
	(*GetIdpReq)(nil),       // 4: identity.platform.api.idps.GetIdpReq
	(*GetIdpResp)(nil),      // 5: identity.platform.api.idps.GetIdpResp
	(*CreateIdpReq)(nil),    // 6: identity.platform.api.idps.CreateIdpReq
	(*CreateIdpResp)(nil),   // 7: identity.platform.api.idps.CreateIdpResp
	(*UpdateIdpReq)(nil),    // 8: identity.platform.api.idps.UpdateIdpReq
	(*UpdateIdpResp)(nil),   // 9: identity.platform.api.idps.UpdateIdpResp
	(*RemoveIdpReq)(nil),    // 10: identity.platform.api.idps.RemoveIdpReq
	(*RemoveIdpResp)(nil),   // 11: identity.platform.api.idps.RemoveIdpResp
	(*structpb.Struct)(nil), // 12: google.protobuf.Struct
}
var file_v0_idps_model_proto_depIdxs = []int32{
	12, // 0: identity.platform.api.idps.Idp.requested_claims:type_name -> google.protobuf.Struct
	12, // 1: identity.platform.api.idps.CreateIdpBody.requested_claims:type_name -> google.protobuf.Struct
	12, // 2: identity.platform.api.idps.UpdateIdpBody.requested_claims:type_name -> google.protobuf.Struct
	0,  // 3: identity.platform.api.idps.ListIdpsResp.data:type_name -> identity.platform.api.idps.Idp
	0,  // 4: identity.platform.api.idps.GetIdpResp.data:type_name -> identity.platform.api.idps.Idp
	1,  // 5: identity.platform.api.idps.CreateIdpReq.idp:type_name -> identity.platform.api.idps.CreateIdpBody
	0,  // 6: identity.platform.api.idps.CreateIdpResp.data:type_name -> identity.platform.api.idps.Idp
	2,  // 7: identity.platform.api.idps.UpdateIdpReq.idp:type_name -> identity.platform.api.idps.UpdateIdpBody
	0,  // 8: identity.platform.api.idps.UpdateIdpResp.data:type_name -> identity.platform.api.idps.Idp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_v0_idps_model_proto_init() }
func file_v0_idps_model_proto_init() {
	if File_v0_idps_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v0_idps_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Idp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdpBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdpBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIdpsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIdpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_idps_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIdpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v0_idps_model_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_v0_idps_model_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v0_idps_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v0_idps_model_proto_goTypes,
		DependencyIndexes: file_v0_idps_model_proto_depIdxs,
		MessageInfos:      file_v0_idps_model_proto_msgTypes,
	}.Build()
	File_v0_idps_model_proto = out.File
	file_v0_idps_model_proto_rawDesc = nil
	file_v0_idps_model_proto_goTypes = nil
	file_v0_idps_model_proto_depIdxs = nil
}
