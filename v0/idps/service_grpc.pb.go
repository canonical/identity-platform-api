// Copyright 2025 Canonical Ltd.
// SPDX-License-Identifier: AGPL-3.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v0/idps/service.proto

package idps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdpsService_ListIdps_FullMethodName  = "/identity.platform.api.idps.IdpsService/ListIdps"
	IdpsService_GetIdp_FullMethodName    = "/identity.platform.api.idps.IdpsService/GetIdp"
	IdpsService_CreateIdp_FullMethodName = "/identity.platform.api.idps.IdpsService/CreateIdp"
	IdpsService_UpdateIdp_FullMethodName = "/identity.platform.api.idps.IdpsService/UpdateIdp"
	IdpsService_RemoveIdp_FullMethodName = "/identity.platform.api.idps.IdpsService/RemoveIdp"
)

// IdpsServiceClient is the client API for IdpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdpsServiceClient interface {
	ListIdps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListIdpsResp, error)
	GetIdp(ctx context.Context, in *GetIdpReq, opts ...grpc.CallOption) (*GetIdpResp, error)
	CreateIdp(ctx context.Context, in *CreateIdpReq, opts ...grpc.CallOption) (*CreateIdpResp, error)
	UpdateIdp(ctx context.Context, in *UpdateIdpReq, opts ...grpc.CallOption) (*UpdateIdpResp, error)
	RemoveIdp(ctx context.Context, in *RemoveIdpReq, opts ...grpc.CallOption) (*RemoveIdpResp, error)
}

type idpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdpsServiceClient(cc grpc.ClientConnInterface) IdpsServiceClient {
	return &idpsServiceClient{cc}
}

func (c *idpsServiceClient) ListIdps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListIdpsResp, error) {
	out := new(ListIdpsResp)
	err := c.cc.Invoke(ctx, IdpsService_ListIdps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpsServiceClient) GetIdp(ctx context.Context, in *GetIdpReq, opts ...grpc.CallOption) (*GetIdpResp, error) {
	out := new(GetIdpResp)
	err := c.cc.Invoke(ctx, IdpsService_GetIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpsServiceClient) CreateIdp(ctx context.Context, in *CreateIdpReq, opts ...grpc.CallOption) (*CreateIdpResp, error) {
	out := new(CreateIdpResp)
	err := c.cc.Invoke(ctx, IdpsService_CreateIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpsServiceClient) UpdateIdp(ctx context.Context, in *UpdateIdpReq, opts ...grpc.CallOption) (*UpdateIdpResp, error) {
	out := new(UpdateIdpResp)
	err := c.cc.Invoke(ctx, IdpsService_UpdateIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idpsServiceClient) RemoveIdp(ctx context.Context, in *RemoveIdpReq, opts ...grpc.CallOption) (*RemoveIdpResp, error) {
	out := new(RemoveIdpResp)
	err := c.cc.Invoke(ctx, IdpsService_RemoveIdp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdpsServiceServer is the server API for IdpsService service.
// All implementations must embed UnimplementedIdpsServiceServer
// for forward compatibility
type IdpsServiceServer interface {
	ListIdps(context.Context, *emptypb.Empty) (*ListIdpsResp, error)
	GetIdp(context.Context, *GetIdpReq) (*GetIdpResp, error)
	CreateIdp(context.Context, *CreateIdpReq) (*CreateIdpResp, error)
	UpdateIdp(context.Context, *UpdateIdpReq) (*UpdateIdpResp, error)
	RemoveIdp(context.Context, *RemoveIdpReq) (*RemoveIdpResp, error)
	mustEmbedUnimplementedIdpsServiceServer()
}

// UnimplementedIdpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdpsServiceServer struct {
}

func (UnimplementedIdpsServiceServer) ListIdps(context.Context, *emptypb.Empty) (*ListIdpsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdps not implemented")
}
func (UnimplementedIdpsServiceServer) GetIdp(context.Context, *GetIdpReq) (*GetIdpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdp not implemented")
}
func (UnimplementedIdpsServiceServer) CreateIdp(context.Context, *CreateIdpReq) (*CreateIdpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdp not implemented")
}
func (UnimplementedIdpsServiceServer) UpdateIdp(context.Context, *UpdateIdpReq) (*UpdateIdpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdp not implemented")
}
func (UnimplementedIdpsServiceServer) RemoveIdp(context.Context, *RemoveIdpReq) (*RemoveIdpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIdp not implemented")
}
func (UnimplementedIdpsServiceServer) mustEmbedUnimplementedIdpsServiceServer() {}

// UnsafeIdpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdpsServiceServer will
// result in compilation errors.
type UnsafeIdpsServiceServer interface {
	mustEmbedUnimplementedIdpsServiceServer()
}

func RegisterIdpsServiceServer(s grpc.ServiceRegistrar, srv IdpsServiceServer) {
	s.RegisterService(&IdpsService_ServiceDesc, srv)
}

func _IdpsService_ListIdps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpsServiceServer).ListIdps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpsService_ListIdps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpsServiceServer).ListIdps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpsService_GetIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpsServiceServer).GetIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpsService_GetIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpsServiceServer).GetIdp(ctx, req.(*GetIdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpsService_CreateIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpsServiceServer).CreateIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpsService_CreateIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpsServiceServer).CreateIdp(ctx, req.(*CreateIdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpsService_UpdateIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpsServiceServer).UpdateIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpsService_UpdateIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpsServiceServer).UpdateIdp(ctx, req.(*UpdateIdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdpsService_RemoveIdp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIdpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdpsServiceServer).RemoveIdp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdpsService_RemoveIdp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdpsServiceServer).RemoveIdp(ctx, req.(*RemoveIdpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdpsService_ServiceDesc is the grpc.ServiceDesc for IdpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.platform.api.idps.IdpsService",
	HandlerType: (*IdpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIdps",
			Handler:    _IdpsService_ListIdps_Handler,
		},
		{
			MethodName: "GetIdp",
			Handler:    _IdpsService_GetIdp_Handler,
		},
		{
			MethodName: "CreateIdp",
			Handler:    _IdpsService_CreateIdp_Handler,
		},
		{
			MethodName: "UpdateIdp",
			Handler:    _IdpsService_UpdateIdp_Handler,
		},
		{
			MethodName: "RemoveIdp",
			Handler:    _IdpsService_RemoveIdp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/idps/service.proto",
}
